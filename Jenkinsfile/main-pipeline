pipeline {
    agent any
    tools{
        jdk 'jdk17'
        maven 'maven3'
    }
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git checkout') {
            steps {
               git branch: 'main', url: 'https://github.com/Pavangowda73/EKART.git' 
            }
        }
        stage('maven compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('maven test') {
            steps {
                sh 'mvn test -DskipTests=true'
            }
        }
        stage('sonarqube analysis') {
            steps {
               withSonarQubeEnv('sonar-server') {
                   sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Ekart -Dsonar.projectName=Ekart \
                         -Dsonar.java.binaries=.'''
                } 
            }
        }
        
        stage('OWASP Dependency check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('maven package') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        stage('deploy artifact to nexus') {
            steps {
               withMaven(globalMavenSettingsConfig: 'pavannexus', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                   sh 'mvn deploy -DskipTests=true'
                } 
            }
        }
        stage('DOCKER BUILD AND TAG') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t ekart -f docker/Dockerfile .'
                        sh 'docker tag ekart pavan73384/ekart:latest'
                    }
                }
            }
        }
        stage('Trivy image scan') {
            steps {
                sh 'trivy image pavan73384/ekart:latest'
            }
        }
        stage('DOCKER PUSH') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push pavan73384/ekart:latest'
                    }
                }
            }
        }
        stage('deploying in k8s cluster') {
            steps {
                script{
                    dir('Kubernetes') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f deployment.yml'
                        }  
                    }
                }
            }
        }
    }
}
